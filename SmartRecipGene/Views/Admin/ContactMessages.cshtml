@* @model IEnumerable<Contact>

<div class="container mt-4">
    <h2>Contact Messages</h2>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Subject</th>
                    <th>Message</th>
                    <th>Date</th>

                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <t

                @foreach (var message in Model)
                {
                    <tr class="@(message.IsRead ? "table-light" : "")">
                        <td>@message.Name</td>
                        <td>@message.Email</td>
                        <td>@message.Subject</td>
                        <td>@message.Message</td>
                        <td>@message.DateSubmitted.ToString("g")</td>
                        <td>
                            <span class="badge @(message.IsRead ? "bg-success" : "bg-warning")">
                                @(message.IsRead ? "Read" : "Unread")
                            </span>
                        </td>
                        <td>
                           
                               <button class="btn btn-sm btn-primary mark-as-read" data-id="@message.Id">
                                   Mark as @(message.IsRead ? "Unread" : "Read")
                               </button>
                               <button class="btn btn-sm btn-danger delete-message" data-id="@message.Id">
                                   Delete
                               </button>
                          


                        <script>
                            document.addEventListener('DOMContentLoaded', function () {
                                // Mark as Read functionality
                                document.querySelectorAll('.mark-as-read').forEach(button => {
                                    button.addEventListener('click', function () {
                                        const messageId = this.dataset.id;

                                        fetch('/Admin/ToggleMessageRead/' + messageId, {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            }
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                if (data.success) {
                                                    const row = this.closest('tr');
                                                    row.classList.toggle('table-light');

                                                    // Update button text
                                                    this.textContent = 'Mark as ' + (data.isRead ? 'Unread' : 'Read');

                                                    // Update status badge
                                                    const badge = row.querySelector('.badge');
                                                    badge.classList.toggle('bg-success');
                                                    badge.classList.toggle('bg-warning');
                                                    badge.textContent = data.isRead ? 'Read' : 'Unread';
                                                } else {
                                                    alert('Failed to update message status');
                                                }
                                            })
                                            .catch(error => {
                                                console.error('Error:', error);
                                                alert('Error occurred while updating message status');
                                            });
                                    });
                                });

                                // Delete functionality
                                document.querySelectorAll('.delete-message').forEach(button => {
                                    button.addEventListener('click', function () {
                                        if (confirm('Are you sure you want to delete this message?')) {
                                            const messageId = this.dataset.id;

                                            fetch('/Admin/DeleteMessage/' + messageId, {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json'
                                                }
                                            })
                                                .then(response => response.json())
                                                .then(data => {
                                                    if (data.success) {
                                                        const row = this.closest('tr');
                                                        row.style.opacity = '0';
                                                        setTimeout(() => row.remove(), 300);
                                                    }
                                                })
                                                .catch(error => {
                                                    console.error('Error:', error);
                                                    alert('Error deleting message');
                                                });
                                        }
                                    });
                                });
                            });
                           </script>
                       
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div> *@
@model IEnumerable<Contact>

<div class="container mt-4 contact-messages-container">
    <div class="page-header">
        <h2>Contact Messages</h2>
        <div class="header-actions">
            <button class="filter-btn active" id="refresh-messages">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
        </div>
    </div>

    <div class="message-stats">
        <div class="stat-box unread">
            <h4>Unread Messages</h4>
            <p>@Model.Count(m => !m.IsRead)</p>
        </div>
        <div class="stat-box total">
            <h4>Total Messages</h4>
            <p>@Model.Count()</p>
        </div>
        <div class="stat-box">
            <h4>Last 7 Days</h4>
            <p>@Model.Count(m => m.DateSubmitted >= DateTime.Now.AddDays(-7))</p>
        </div>
    </div>

    <div class="message-filters">
        <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all">All Messages</button>
            <button class="filter-btn" data-filter="unread">Unread</button>
            <button class="filter-btn" data-filter="read">Read</button>
        </div>
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" id="message-search" placeholder="Search messages...">
        </div>
    </div>

    <div class="message-table">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th width="18%">Name</th>
                        <th width="20%">Email</th>
                        <th width="15%">Subject</th>
                        <th width="22%">Message</th>
                        <th width="10%">Date</th>
                        <th width="5%">Status</th>
                        <th width="10%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var message in Model)
                    {
                        <tr class="@(message.IsRead ? "read" : "")">
                            <td>@message.Name</td>
                            <td>@message.Email</td>
                            <td>@message.Subject</td>
                            <td class="message-preview">@message.Message</td>
                            <td class="date-cell">@message.DateSubmitted.ToString("MMM d, yyyy")<br><small>@message.DateSubmitted.ToString("h:mm tt")</small></td>
                            <td>
                                <span class="status-badge @(message.IsRead ? "read" : "unread")">
                                    @(message.IsRead ? "Read" : "Unread")
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button class="action-btn read-btn mark-as-read" data-id="@message.Id">
                                        <i class="fas @(message.IsRead ? "fa-envelope" : "fa-envelope-open")"></i>
                                        @(message.IsRead ? "Mark Unread" : "Mark Read")
                                    </button>
                                    <button class="action-btn delete-btn delete-message" data-id="@message.Id">
                                        <i class="fas fa-trash-alt"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Mark as Read functionality
        document.querySelectorAll('.mark-as-read').forEach(button => {
            button.addEventListener('click', function () {
                const messageId = this.dataset.id;

                fetch('/Admin/ToggleMessageRead/' + messageId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const row = this.closest('tr');
                            row.classList.toggle('read');

                            // Update button icon and text
                            const icon = this.querySelector('i');
                            icon.classList.toggle('fa-envelope');
                            icon.classList.toggle('fa-envelope-open');
                            this.textContent = data.isRead ? 'Mark Unread' : 'Mark Read';

                            // Re-append the icon since textContent replaced it
                            this.prepend(icon);

                            // Update status badge
                            const badge = row.querySelector('.status-badge');
                            badge.classList.toggle('read');
                            badge.classList.toggle('unread');
                            badge.textContent = data.isRead ? 'Read' : 'Unread';

                            // Update stats
                            updateMessageCounts();
                        } else {
                            showNotification('Failed to update message status', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showNotification('Error occurred while updating message status', 'error');
                    });
            });
        });

        // Delete functionality
        document.querySelectorAll('.delete-message').forEach(button => {
            button.addEventListener('click', function () {
                if (confirm('Are you sure you want to delete this message?')) {
                    const messageId = this.dataset.id;
                    const row = this.closest('tr');

                    fetch('/Admin/DeleteMessage/' + messageId, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                row.classList.add('fade-out');
                                setTimeout(() => {
                                    row.remove();
                                    updateMessageCounts();
                                    showNotification('Message deleted successfully', 'success');
                                }, 300);
                            } else {
                                showNotification('Failed to delete message', 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showNotification('Error deleting message', 'error');
                        });
                }
            });
        });

        // Filter buttons
        document.querySelectorAll('.filter-buttons .filter-btn').forEach(button => {
            button.addEventListener('click', function () {
                // Remove active class from all filter buttons
                document.querySelectorAll('.filter-buttons .filter-btn').forEach(btn => {
                    btn.classList.remove('active');
                });

                // Add active class to clicked button
                this.classList.add('active');

                const filter = this.dataset.filter;
                const rows = document.querySelectorAll('tbody tr');

                rows.forEach(row => {
                    if (filter === 'all') {
                        row.style.display = '';
                    } else if (filter === 'read' && row.classList.contains('read')) {
                        row.style.display = '';
                    } else if (filter === 'unread' && !row.classList.contains('read')) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        });

        // Search functionality
        const searchInput = document.getElementById('message-search');
        searchInput.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                if (text.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Function to update message counts
        function updateMessageCounts() {
            const totalMessages = document.querySelectorAll('tbody tr').length;
            const unreadMessages = document.querySelectorAll('tbody tr:not(.read)').length;

            document.querySelector('.stat-box.total p').textContent = totalMessages;
            document.querySelector('.stat-box.unread p').textContent = unreadMessages;
        }

        // Function to show notifications
        function showNotification(message, type) {
            // This could be replaced with a more sophisticated notification system
            if (type === 'error') {
                alert(message);
            } else {
                // For success messages, you could implement a toast notification
                console.log(message);
            }
        }

        // Refresh button
        document.getElementById('refresh-messages').addEventListener('click', function () {
            location.reload();
        });
    });
</script>
<style>
    /* Contact Messages Admin Page Styles */
.contact-messages-container {
    background-color: #f5f7fa;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #E67E22;
}

.page-header h2 {
    color: #E67E22;
    font-weight: 600;
    margin: 0;
}

.message-stats {
    display: flex;
    gap: 15px;
    margin-bottom: 20px;
}

.stat-box {
    background: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.06);
    flex: 1;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.stat-box::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background-color: #E67E22;
}

.stat-box h4 {
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: #777;
    margin-bottom: 5px;
}

.stat-box p {
    font-size: 22px;
    font-weight: 600;
    margin: 0;
}

.stat-box.unread p {
    color: #E67E22;
}

.stat-box.total p {
    color: #3498db;
}

.message-filters {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.filter-buttons {
    display: flex;
    gap: 10px;
}

.filter-btn {
    background: white;
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 6px 16px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s;
}

.filter-btn:hover, .filter-btn.active {
    background-color: #E67E22;
    color: white;
    border-color: #E67E22;
}

.search-box {
    position: relative;
}

.search-box input {
    border-radius: 20px;
    padding: 8px 15px 8px 35px;
    border: 1px solid #ddd;
    width: 250px;
}

.search-box i {
    position: absolute;
    left: 12px;
    top: 10px;
    color: #999;
}

/* Table Styles */
.message-table {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.table {
    margin-bottom: 0;
}

.table thead {
    background-color: rgba(230, 126, 34, 0.1);
}

.table th {
    padding: 15px;
    font-weight: 600;
    color: #555;
    border-bottom: 2px solid #E67E22;
    font-size: 14px;
}

.table td {
    padding: 15px;
    vertical-align: middle;
    border-bottom: 1px solid #eee;
}

.table tr:hover {
    background-color: rgba(230, 126, 34, 0.05);
}

.table tr.read {
    background-color: #f9f9f9;
}

.message-preview {
    max-width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.date-cell {
    white-space: nowrap;
    color: #777;
    font-size: 13px;
}

/* Status Badge */
.status-badge {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.unread {
    background-color: rgba(230, 126, 34, 0.2);
    color: #E67E22;
}

.status-badge.read {
    background-color: rgba(46, 204, 113, 0.2);
    color: #2ecc71;
}

/* Action Buttons */
.action-buttons {
    display: flex;
    gap: 8px;
}

.action-btn {
    border: none;
    border-radius: 4px;
    padding: 6px 10px;
    font-size: 13px;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: 5px;
}

.action-btn i {
    font-size: 12px;
}

.read-btn {
    background-color: #E1F5FE;
    color: #0288D1;
}

.read-btn:hover {
    background-color: #0288D1;
    color: white;
}

.delete-btn {
    background-color: #FFEBEE;
    color: #E53935;
}

.delete-btn:hover {
    background-color: #E53935;
    color: white;
}

/* Animation for row removal */
.fade-out {
    transition: opacity 0.3s, transform 0.3s;
    opacity: 0;
    transform: translateX(20px);
}

/* Responsive adjustments */
@@media (max-width: 992px) {
    .message-preview {
        max-width: 150px;
    }
    
    .action-buttons {
        flex-direction: column;
    }
}

@@media (max-width: 768px) {
    .message-stats {
        flex-direction: column;
    }
    
    .message-filters {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
    
    .search-box input {
        width: 100%;
    }
    
    .message-preview {
        max-width: 100px;
    }
}
</style>
