@* 

                    @model IEnumerable<SmartRecipGene.Models.Recipe>

<h2>Admin - Manage Recipes</h2>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text"
                       id="searchInput"
                       class="form-control"
                       placeholder="Search recipes by title, cuisine, or diet type..."
                       autocomplete="off" />
                <div id="searchSuggestions" class="suggestions-box"></div>
            </div>
        </div>
    </div>
    <div class="col-md-6 text-right">
        <a asp-action="CreateBlog" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add New Recipe
        </a>
    </div>
</div>

<table class="table table-striped table-bordered" id="recipeTable">
    <thead class="thead-dark">
        <tr>
            <th>Title</th>
            <th>Cuisine Type</th>
            <th>Diet Type</th>
            <th>Cooking Time</th>
            <th>Servings</th>
            <th>Difficulty</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var recipe in Model)
        {
            <tr>
                <td>@recipe.Title</td>
                <td>@recipe.CusineType</td>
                <td>@recipe.DietType</td>
                <td>@recipe.CookingTime minutes</td>
                <td>@recipe.Servings</td>
                <td>@recipe.DifficultyLevel</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@recipe.Id" class="btn btn-sm btn-primary">
                        <i class="fas fa-edit"></i> Edit
                    </a>
                    <button onclick="confirmDelete(@recipe.Id)" class="btn btn-sm btn-danger">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<style>
    .search-container {
        margin-bottom: 20px;
    }

    .search-box {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    #searchInput {
        padding-left: 35px;
        border-radius: 20px;
    }

    .suggestions-box {
        position: absolute;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: none;
        z-index: 1000;
        margin-top: 5px;
    }

    .suggestion-item {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
    }

        .suggestion-item:last-child {
            border-bottom: none;
        }

        .suggestion-item:hover {
            background-color: #f8f9fa;
        }

    .no-results {
        padding: 8px 12px;
        color: #6c757d;
        font-style: italic;
    }
</style>

<script>
    function confirmDelete(id) {
        if (confirm("Are you sure you want to delete this recipe?")) {
            window.location.href = "/AdminRecipe/Delete/" + id;
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('searchInput');
        const suggestionsBox = document.getElementById('searchSuggestions');
        const table = document.getElementById('recipeTable').getElementsByTagName('tbody')[0];
        let typingTimer;

        searchInput.addEventListener('input', function () {
            clearTimeout(typingTimer);
            const query = this.value.trim();

            if (query.length < 2) {
                suggestionsBox.style.display = 'none';
                showAllRows();
                return;
            }

            typingTimer = setTimeout(async () => {
                try {
                    const response = await fetch(`/Home/GetSpellingSuggestions?query=${encodeURIComponent(query)}`);
                    const suggestions = await response.json();

                    suggestionsBox.innerHTML = '';

                    if (suggestions.length > 0) {
                        suggestions.forEach(suggestion => {
                            const div = document.createElement('div');
                            div.className = 'suggestion-item';
                            div.textContent = suggestion;
                            div.onclick = () => {
                                searchInput.value = suggestion;
                                suggestionsBox.style.display = 'none';
                                filterTable(suggestion);
                            };
                            suggestionsBox.appendChild(div);
                        });
                    } else {
                        const div = document.createElement('div');
                        div.className = 'no-results';
                        div.textContent = 'No suggestions found';
                        suggestionsBox.appendChild(div);
                    }

                    suggestionsBox.style.display = 'block';
                    filterTable(query);
                } catch (error) {
                    console.error('Error:', error);
                }
            }, 300);
        });

        document.addEventListener('click', function (e) {
            if (!suggestionsBox.contains(e.target) && e.target !== searchInput) {
                suggestionsBox.style.display = 'none';
            }
        });

        function filterTable(query) {
            const rows = table.getElementsByTagName('tr');
            const lowercaseQuery = query.toLowerCase();
            let hasVisibleRows = false;

            for (let row of rows) {
                const title = row.cells[0].textContent.toLowerCase();
                const cuisine = row.cells[1].textContent.toLowerCase();
                const diet = row.cells[2].textContent.toLowerCase();

                if (title.includes(lowercaseQuery) ||
                    cuisine.includes(lowercaseQuery) ||
                    diet.includes(lowercaseQuery)) {
                    row.style.display = '';
                    hasVisibleRows = true;
                } else {
                    row.style.display = 'none';
                }
            }

            if (!hasVisibleRows) {
                const tbody = table.querySelector('tbody');
                if (tbody.querySelector('.no-results-row') === null) {
                    const noResultsRow = table.insertRow();
                    noResultsRow.className = 'no-results-row';
                    const cell = noResultsRow.insertCell();
                    cell.colSpan = 7;
                    cell.textContent = 'No matching recipes found';
                    cell.style.textAlign = 'center';
                    cell.style.padding = '20px';
                }
            } else {
                const noResultsRow = table.querySelector('.no-results-row');
                if (noResultsRow) {
                    noResultsRow.remove();
                }
            }
        }

        function showAllRows() {
            const rows = table.getElementsByTagName('tr');
            for (let row of rows) {
                row.style.display = '';
            }
            const noResultsRow = table.querySelector('.no-results-row');
            if (noResultsRow) {
                noResultsRow.remove();
            }
        }
    });
</script> *@

@* Add this near the top of your view *@
@Html.AntiForgeryToken()

                @model IEnumerable<SmartRecipGene.Models.Recipe>

<h2 class="mb-4">Recipe Management Dashboard</h2>

<!-- Stats Cards -->
<div class="row mb-4">
    <div class="col-xl-3 col-md-6">
        <div class="card bg-primary text-white mb-4">
            <div class="card-body">
                <h5>Total Recipes</h5>
                <h2>@(Model?.Count() ?? 0)</h2>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card bg-success text-white mb-4">
            <div class="card-body">
                <h5>Vegetarian</h5>
                <h2>@(Model?.Count(r => r.DietType?.Contains("Vegetarian") ?? false) ?? 0)</h2>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card bg-warning text-white mb-4">
            <div class="card-body">
                <h5>Quick Recipes</h5>
                <h2>@(Model?.Count(r => r.CookingTime <= 30) ?? 0)</h2>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card bg-info text-white mb-4">
            <div class="card-body">
                <h5>Cuisine Types</h5>
                <h2>@(Model?.Select(r => r.CusineType).Distinct().Count() ?? 0)</h2>
            </div>
        </div>
    </div>
</div>

<!-- Search and Filter Section -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="searchInput" class="form-control" placeholder="Search recipes..." autocomplete="off" />
                <div id="searchSuggestions" class="suggestions-box"></div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <select id="cuisineFilter" class="form-control mr-2" style="width: auto;">
                <option value="">All Cuisines</option>
                @foreach (var cuisine in Model?.Select(r => r.CusineType).Distinct().OrderBy(c => c) ?? Enumerable.Empty<string>())
                {
                    <option value="@cuisine">@cuisine</option>
                }
            </select>
            <select id="dietFilter" class="form-control mr-2" style="width: auto;">
                <option value="">All Diets</option>
                @foreach (var diet in Model?.Select(r => r.DietType).Distinct().OrderBy(d => d) ?? Enumerable.Empty<string>())
                {
                    <option value="@diet">@diet</option>
                }
            </select>
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Add Recipe
            </a>
        </div>
    </div>
</div>
<div class="bulk-actions mb-2" style="display: none;">
    <button class="btn btn-danger" onclick="bulkDelete()">
        <i class="fas fa-trash"></i> Delete Selected
    </button>
</div>
<!-- Recipe Table -->
<div class="table-responsive">
    <table class="table table-hover table-bordered" id="recipeTable">
        <thead class="thead-dark">
            <tr>
                <th>
                    <input type="checkbox" id="selectAll" />
                </th>
                <th onclick="sortTable(0)" style="cursor: pointer;">Title <i class="fas fa-sort"></i></th>
                <th onclick="sortTable(1)" style="cursor: pointer;">Cuisine Type <i class="fas fa-sort"></i></th>
                <th onclick="sortTable(2)" style="cursor: pointer;">Diet Type <i class="fas fa-sort"></i></th>
                <th onclick="sortTable(3)" style="cursor: pointer;">Cooking Time <i class="fas fa-sort"></i></th>
                <th onclick="sortTable(4)" style="cursor: pointer;">Servings <i class="fas fa-sort"></i></th>
                <th onclick="sortTable(5)" style="cursor: pointer;">Difficulty <i class="fas fa-sort"></i></th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in Model ?? Enumerable.Empty<SmartRecipGene.Models.Recipe>())
            {
                <tr>
                    <td>
                        <input type="checkbox" class="recipe-checkbox" value="@recipe.Id" />
                    </td>
                    <td>@recipe.Title</td>
                    <td>@recipe.CusineType</td>
                    <td>@recipe.DietType</td>
                    <td>@recipe.CookingTime minutes</td>
                    <td>@recipe.Servings</td>
                    <td>@recipe.DifficultyLevel</td>
                    <td>
                        <div class="btn-group">
                            <a asp-action="Edit" asp-route-id="@recipe.Id" class="btn btn-sm btn-primary">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a asp-action="Details" asp-route-id="@recipe.Id" class="btn btn-sm btn-info">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <button onclick="confirmDelete(@recipe.Id)" class="btn btn-sm btn-danger">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    .card {
        transition: transform 0.2s;
        border-radius: 8px;
    }
    .card:hover {
        transform: translateY(-5px);
    }
    .search-container {
        margin-bottom: 20px;
    }
    .search-box {
        position: relative;
    }
    .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }
    #searchInput {
        padding-left: 35px;
        border-radius: 20px;
    }
    .suggestions-box {
        position: absolute;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: none;
        z-index: 1000;
        margin-top: 5px;
    }
    .suggestion-item {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
    }
    .suggestion-item:last-child {
        border-bottom: none;
    }
    .suggestion-item:hover {
        background-color: #f8f9fa;
    }
    .btn-group {
        display: flex;
        gap: 5px;
    }
    .table th {
        position: relative;
    }
    .table th i {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
    }
    .table-hover tbody tr:hover {
        background-color: rgba(0,0,0,.075);
    }
    .no-results {
        padding: 8px 12px;
        color: #6c757d;
        font-style: italic;
    }
</style>

<script>
    function confirmDelete(id) {
        if (confirm("Are you sure you want to delete this recipe?")) {
            window.location.href = "/AdminRecipe/Delete/" + id;
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('searchInput');
        const cuisineFilter = document.getElementById('cuisineFilter');
        const dietFilter = document.getElementById('dietFilter');
        const table = document.getElementById('recipeTable').getElementsByTagName('tbody')[0];
        const selectAll = document.getElementById('selectAll');
        const bulkActions = document.querySelector('.bulk-actions');
        // Add event listeners for filters
        searchInput.addEventListener('input', filterRecipes);
        cuisineFilter.addEventListener('change', filterRecipes);
        dietFilter.addEventListener('change', filterRecipes);
        selectAll?.addEventListener('change', handleSelectAll);
        document.querySelectorAll('.recipe-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateBulkActionsVisibility);
        });

        function handleSelectAll() {
            document.querySelectorAll('.recipe-checkbox').forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
            updateBulkActionsVisibility();
        }

        function updateBulkActionsVisibility() {
            const checkedBoxes = document.querySelectorAll('.recipe-checkbox:checked');
            bulkActions.style.display = checkedBoxes.length > 0 ? 'block' : 'none';
        }

        window.bulkDelete = function () {
            const selectedIds = Array.from(document.querySelectorAll('.recipe-checkbox:checked'))
                .map(cb => cb.value);

            if (confirm(`Are you sure you want to delete ${selectedIds.length} recipes?`)) {
                fetch('/AdminRecipe/BulkDelete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(selectedIds)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('Error deleting recipes');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error deleting recipes');
                    });
            }
        }
        function filterRecipes() {
            const searchQuery = searchInput.value.toLowerCase().trim();
            const selectedCuisine = cuisineFilter.value.toLowerCase();
            const selectedDiet = dietFilter.value.toLowerCase();
            const rows = table.getElementsByTagName('tr');
            let hasVisibleRows = false;

            for (let row of rows) {
                const title = row.cells[1].textContent.toLowerCase();
                const cuisine = row.cells[2].textContent.toLowerCase();
                const diet = row.cells[3].textContent.toLowerCase();

                const matchesSearch = searchQuery === '' ||
                    title.includes(searchQuery) ||
                    cuisine.includes(searchQuery) ||
                    diet.includes(searchQuery);

                const matchesCuisine = selectedCuisine === '' || cuisine === selectedCuisine;
                const matchesDiet = selectedDiet === '' || diet === selectedDiet;

                if (matchesSearch && matchesCuisine && matchesDiet) {
                    row.style.display = '';
                    hasVisibleRows = true;
                } else {
                    row.style.display = 'none';
                }
            }

            // Handle no results
            const noResultsRow = table.querySelector('.no-results-row');
            if (!hasVisibleRows) {
                if (!noResultsRow) {
                    const newRow = table.insertRow();
                    newRow.className = 'no-results-row';
                    const cell = newRow.insertCell();
                    cell.colSpan = 8;
                    cell.textContent = 'No matching recipes found';
                    cell.style.textAlign = 'center';
                    cell.style.padding = '20px';
                }
            } else if (noResultsRow) {
                noResultsRow.remove();
            }

            // Update stats cards based on filtered results
            updateStatsCards();
        }

        function updateStatsCards() {
            const visibleRows = Array.from(table.getElementsByTagName('tr')).filter(row => row.style.display !== 'none');

            // Update total recipes
            document.querySelector('.bg-primary h2').textContent = visibleRows.length;

            // Update vegetarian count
            const vegetarianCount = visibleRows.filter(row =>
                row.cells[3].textContent.toLowerCase().includes('vegetarian')).length;
            document.querySelector('.bg-success h2').textContent = vegetarianCount;

            // Update quick recipes count
            const quickRecipesCount = visibleRows.filter(row =>
                parseInt(row.cells[4].textContent) <= 30).length;
            document.querySelector('.bg-warning h2').textContent = quickRecipesCount;

            // Update cuisine types count
            const uniqueCuisines = new Set(visibleRows.map(row => row.cells[2].textContent.trim()));
            document.querySelector('.bg-info h2').textContent = uniqueCuisines.size;
        }

        // Add sorting functionality
        window.sortTable = function (n) {
            let switching = true;
            let dir = "asc";
            let switchcount = 0;

            while (switching) {
                switching = false;
                const rows = table.getElementsByTagName("tr");

                for (let i = 0; i < rows.length - 1; i++) {
                    let shouldSwitch = false;
                    const x = rows[i].getElementsByTagName("td")[n+1];
                    const y = rows[i + 1].getElementsByTagName("td")[n+1];

                    if (!x || !y) continue;

                    let xValue = x.textContent.toLowerCase();
                    let yValue = y.textContent.toLowerCase();

                    // Handle numeric values (cooking time and servings)
                    if (n === 3 || n === 4) {
                        xValue = parseInt(xValue);
                        yValue = parseInt(yValue);
                    }

                    if (dir === "asc") {
                        if (xValue > yValue) {
                            shouldSwitch = true;
                            break;
                        }
                    } else {
                        if (xValue < yValue) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount === 0 && dir === "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    });
</script>