@model SmartRecipGene.Models.Recipe

@{
    ViewData["Title"] = "Recipe Details";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header custom-header text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Recipe Details</h3>
            <div>
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-light mr-2">
                    <i class="fas fa-edit"></i> Edit
                </a>
                <a asp-action="Index" class="btn btn-light">
                    <i class="fas fa-arrow-left"></i> Back to List
                </a>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <img src="@Model.ImageUrl" alt="@Model.Title" class="img-fluid rounded mb-3" style="max-height: 300px; width: 100%; object-fit: cover;">
                    }
                    <h4 class="mb-3">@Model.Title</h4>
                    <div class="recipe-meta mb-4">
                        <span class="badge badge-primary mr-2">
                            <i class="fas fa-clock"></i> @Model.CookingTime minutes
                        </span>
                        <span class="badge badge-success mr-2">
                            <i class="fas fa-users"></i> @Model.Servings servings
                        </span>
                        <span class="badge badge-info mr-2">
                            <i class="fas fa-utensils"></i> @Model.CusineType
                        </span>
                        <span class="badge badge-warning">
                            <i class="fas fa-layer-group"></i> @Model.DifficultyLevel
                        </span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h5 class="mb-0"><i class="fas fa-info-circle"></i> Recipe Information</h5>
                        </div>
                        <div class="card-body">
                            <dl class="row mb-0">
                                <dt class="col-sm-4">Diet Type</dt>
                                <dd class="col-sm-8">@Model.DietType</dd>

                                <dt class="col-sm-4">Cuisine</dt>
                                <dd class="col-sm-8">@Model.CusineType</dd>

                                <dt class="col-sm-4">Difficulty</dt>
                                <dd class="col-sm-8">@Model.DifficultyLevel</dd>

                                <dt class="col-sm-4">Preparation Time</dt>
                                <dd class="col-sm-8">@Model.CookingTime minutes</dd>

                                <dt class="col-sm-4">Servings</dt>
                                <dd class="col-sm-8">@Model.Servings</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0"><i class="fas fa-list"></i> Ingredients</h5>
                        </div>
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(Model.Ingredients))
                            {
                                <ul class="list-group list-group-flush">
                                    @foreach (var ingredient in Model.Ingredients.Split(','))
                                    {
                                        <li class="list-group-item">@ingredient.Trim()</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No ingredients listed</p>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0"><i class="fas fa-tasks"></i> Instructions</h5>
                        </div>
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(Model.Instructions))
                            {
                                <p class="mb-0 white-space-pre-wrap">  @Html.Raw(Model.Instructions)</p>
                            }                      

                            else
                            {
                                <p class="text-muted">No instructions available</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* <style>
    :root {
        --primary: #6366f1;
        --primary-light: #818cf8;
        --success: #10b981;
        --success-light: #34d399;
        --warning: #f59e0b;
        --warning-light: #fbbf24;
        --info: #3b82f6;
        --info-light: #60a5fa;
        --danger: #ef4444;
        --white: #ffffff;
        --gray-50: #f8fafc;
        --gray-100: #f1f5f9;
        --gray-200: #e2e8f0;
        --text-dark: #1e293b;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .card {
        border: none;
        border-radius: 16px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        background: var(--white);
        transition: all 0.3s ease;
    }

    .custom-header {
        background: linear-gradient(135deg, var(--primary), var(--primary-light));
        border-radius: 16px 16px 0 0;
        padding: 1.5rem;
    }

    .btn-light {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: var(--white);
        backdrop-filter: blur(4px);
        transition: all 0.3s ease;
    }

    .btn-light:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }

    .recipe-meta .badge {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 500;
        font-size: 0.875rem;
    }

    .badge-primary {
        background: linear-gradient(135deg, var(--primary), var(--primary-light));
    }

    .badge-success {
        background: linear-gradient(135deg, var(--success), var(--success-light));
    }

    .badge-info {
        background: linear-gradient(135deg, var(--info), var(--info-light));
    }

    .badge-warning {
        background: linear-gradient(135deg, var(--warning), var(--warning-light));
        color: var(--text-dark);
    }

    .card-header {
        border-bottom: 1px solid var(--gray-100);
        background-color: var(--gray-50);
        padding: 1rem 1.5rem;
    }

    .card-header h5 {
        color: var(--text-dark);
        font-size: 1.1rem;
        font-weight: 600;
    }

    .card-body {
        padding: 1.5rem;
    }

    dl.row {
        margin-bottom: 0;
    }

    dt {
        color: var(--text-dark);
        font-weight: 600;
        font-size: 0.9rem;
    }

    dd {
        color: var(--text-dark);
        font-size: 0.9rem;
        margin-bottom: 0.8rem;
    }

    .list-group-item {
        border: none;
        border-bottom: 1px solid var(--gray-100);
        padding: 1rem 0;
        color: var(--text-dark);
        font-size: 0.95rem;
    }

    .list-group-item:last-child {
        border-bottom: none;
    }

    .white-space-pre-wrap {
        white-space: pre-wrap;
        color: var(--text-dark);
        font-size: 0.95rem;
        line-height: 1.7;
    }

    .text-muted {
        color: #64748b !important;
    }

    .img-fluid {
        border-radius: 12px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    /* Hover effects */
    .card:hover {
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    .recipe-meta .badge:hover {
        transform: translateY(-2px);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .custom-header {
            flex-direction: column;
            gap: 1rem;
        }

        .recipe-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .recipe-meta .badge {
            margin: 0 !important;
        }
    }
</style> *@

        <style>
    :root {
        --primary: #E67E22;
        --primary-light: #F39C12;
        --primary-lighter: #FEF5E7;
        --primary-dark: #D35400;
        --white: #ffffff;
        --gray-50: #F8FAFC;
        --gray-100: #F1F5F9;
        --gray-200: #E2E8F0;
        --text-dark: #2C3E50;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .card {
        border: none;
        border-radius: 16px;
        box-shadow: 0 4px 6px rgba(230, 126, 34, 0.1);
        background: var(--white);
        transition: all 0.3s ease;
    }

    .card:hover {
        box-shadow: 0 10px 15px rgba(230, 126, 34, 0.15);
    }

    .custom-header {
        background: linear-gradient(135deg, var(--primary), var(--primary-light));
        border-radius: 16px 16px 0 0;
        padding: 1.5rem;
    }

    .btn-light {
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: var(--white);
        transition: all 0.3s ease;
    }

    .btn-light:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
    }

    .recipe-meta .badge {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 500;
        font-size: 0.875rem;
        margin-right: 0.5rem;
    }

    .badge-primary {
        background: linear-gradient(135deg, var(--primary), var(--primary-light));
        color: var(--white);
    }

    .badge-success {
        background: linear-gradient(135deg, #27AE60, #2ECC71);
        color: var(--white);
    }

    .badge-info {
        background: linear-gradient(135deg, #3498DB, #2980B9);
        color: var(--white);
    }

    .badge-warning {
        background: linear-gradient(135deg, var(--primary-light), #F5B041);
        color: var(--white);
    }

    .card-header {
        background-color: var(--primary-lighter);
        border-bottom: 1px solid rgba(230, 126, 34, 0.1);
        padding: 1rem 1.5rem;
    }

    .card-header h5 {
        color: var(--primary-dark);
        font-size: 1.1rem;
        font-weight: 600;
    }

    .card-body {
        padding: 1.5rem;
    }

    dl.row {
        margin-bottom: 0;
    }

    dt {
        color: var(--text-dark);
        font-weight: 600;
        font-size: 0.9rem;
    }

    dd {
        color: var(--text-dark);
        font-size: 0.9rem;
        margin-bottom: 0.8rem;
    }

    .list-group-item {
        border: none;
        border-bottom: 1px solid var(--gray-100);
        padding: 1rem 0;
        color: var(--text-dark);
        font-size: 0.95rem;
    }

    .list-group-item:last-child {
        border-bottom: none;
    }

    .white-space-pre-wrap {
        white-space: pre-wrap;
        color: var(--text-dark);
        font-size: 0.95rem;
        line-height: 1.7;
    }

    .text-muted {
        color: #95A5A6 !important;
    }

    .img-fluid {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(230, 126, 34, 0.1);
    }

    /* Hover effects */
    .badge:hover {
        transform: translateY(-2px);
        transition: transform 0.3s ease;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .custom-header {
            flex-direction: column;
            gap: 1rem;
        }

        .recipe-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .recipe-meta .badge {
            margin: 0;
        }
    }
</style>